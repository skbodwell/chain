// Code generated by protoc-gen-go.
// source: hsm.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type XPub struct {
	Alias string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Xpub  []byte `protobuf:"bytes,2,opt,name=xpub,proto3" json:"xpub,omitempty"`
}

func (m *XPub) Reset()                    { *m = XPub{} }
func (m *XPub) String() string            { return proto.CompactTextString(m) }
func (*XPub) ProtoMessage()               {}
func (*XPub) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *XPub) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *XPub) GetXpub() []byte {
	if m != nil {
		return m.Xpub
	}
	return nil
}

type CreateKeyRequest struct {
	Alias string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
}

func (m *CreateKeyRequest) Reset()                    { *m = CreateKeyRequest{} }
func (m *CreateKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateKeyRequest) ProtoMessage()               {}
func (*CreateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CreateKeyRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type CreateKeyResponse struct {
	Xpub  *XPub  `protobuf:"bytes,1,opt,name=xpub" json:"xpub,omitempty"`
	Error *Error `protobuf:"bytes,9,opt,name=error" json:"error,omitempty"`
}

func (m *CreateKeyResponse) Reset()                    { *m = CreateKeyResponse{} }
func (m *CreateKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateKeyResponse) ProtoMessage()               {}
func (*CreateKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CreateKeyResponse) GetXpub() *XPub {
	if m != nil {
		return m.Xpub
	}
	return nil
}

func (m *CreateKeyResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ListKeysQuery struct {
	Aliases []string `protobuf:"bytes,1,rep,name=aliases" json:"aliases,omitempty"`
	After   string   `protobuf:"bytes,2,opt,name=after" json:"after,omitempty"`
}

func (m *ListKeysQuery) Reset()                    { *m = ListKeysQuery{} }
func (m *ListKeysQuery) String() string            { return proto.CompactTextString(m) }
func (*ListKeysQuery) ProtoMessage()               {}
func (*ListKeysQuery) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *ListKeysQuery) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *ListKeysQuery) GetAfter() string {
	if m != nil {
		return m.After
	}
	return ""
}

type ListKeysResponse struct {
	Items    []*XPub        `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	LastPage bool           `protobuf:"varint,2,opt,name=last_page,json=lastPage" json:"last_page,omitempty"`
	Next     *ListKeysQuery `protobuf:"bytes,3,opt,name=next" json:"next,omitempty"`
	Error    *Error         `protobuf:"bytes,9,opt,name=error" json:"error,omitempty"`
}

func (m *ListKeysResponse) Reset()                    { *m = ListKeysResponse{} }
func (m *ListKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*ListKeysResponse) ProtoMessage()               {}
func (*ListKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *ListKeysResponse) GetItems() []*XPub {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListKeysResponse) GetLastPage() bool {
	if m != nil {
		return m.LastPage
	}
	return false
}

func (m *ListKeysResponse) GetNext() *ListKeysQuery {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListKeysResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type DeleteKeyRequest struct {
	Xpub []byte `protobuf:"bytes,1,opt,name=xpub,proto3" json:"xpub,omitempty"`
}

func (m *DeleteKeyRequest) Reset()                    { *m = DeleteKeyRequest{} }
func (m *DeleteKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteKeyRequest) ProtoMessage()               {}
func (*DeleteKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *DeleteKeyRequest) GetXpub() []byte {
	if m != nil {
		return m.Xpub
	}
	return nil
}

func init() {
	proto.RegisterType((*XPub)(nil), "pb.XPub")
	proto.RegisterType((*CreateKeyRequest)(nil), "pb.CreateKeyRequest")
	proto.RegisterType((*CreateKeyResponse)(nil), "pb.CreateKeyResponse")
	proto.RegisterType((*ListKeysQuery)(nil), "pb.ListKeysQuery")
	proto.RegisterType((*ListKeysResponse)(nil), "pb.ListKeysResponse")
	proto.RegisterType((*DeleteKeyRequest)(nil), "pb.DeleteKeyRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HSM service

type HSMClient interface {
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	ListKeys(ctx context.Context, in *ListKeysQuery, opts ...grpc.CallOption) (*ListKeysResponse, error)
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type hSMClient struct {
	cc *grpc.ClientConn
}

func NewHSMClient(cc *grpc.ClientConn) HSMClient {
	return &hSMClient{cc}
}

func (c *hSMClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	out := new(CreateKeyResponse)
	err := grpc.Invoke(ctx, "/pb.HSM/CreateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMClient) ListKeys(ctx context.Context, in *ListKeysQuery, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := grpc.Invoke(ctx, "/pb.HSM/ListKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := grpc.Invoke(ctx, "/pb.HSM/DeleteKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HSM service

type HSMServer interface {
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	ListKeys(context.Context, *ListKeysQuery) (*ListKeysResponse, error)
	DeleteKey(context.Context, *DeleteKeyRequest) (*ErrorResponse, error)
}

func RegisterHSMServer(s *grpc.Server, srv HSMServer) {
	s.RegisterService(&_HSM_serviceDesc, srv)
}

func _HSM_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HSM/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSM_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HSM/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMServer).ListKeys(ctx, req.(*ListKeysQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSM_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HSM/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HSM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HSM",
	HandlerType: (*HSMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _HSM_CreateKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _HSM_ListKeys_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _HSM_DeleteKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hsm.proto",
}

func init() { proto.RegisterFile("hsm.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xdf, 0xf4, 0xcf, 0x6b, 0x76, 0xac, 0xd0, 0x0e, 0x15, 0x42, 0x14, 0x2d, 0x01, 0x25,
	0xa7, 0x22, 0x15, 0x3d, 0x78, 0xf1, 0xa0, 0x82, 0x50, 0x85, 0xba, 0x5e, 0xbc, 0x49, 0x22, 0x63,
	0x2d, 0x34, 0xcd, 0xba, 0xbb, 0x81, 0xf6, 0x93, 0xf8, 0x35, 0xfc, 0x88, 0xb2, 0xbb, 0x6d, 0x4c,
	0xab, 0xe0, 0x2d, 0xf3, 0xcc, 0xce, 0x33, 0xbf, 0x99, 0x09, 0xb0, 0x37, 0x95, 0xf5, 0x85, 0xcc,
	0x75, 0x8e, 0x35, 0x91, 0x86, 0xad, 0x97, 0x3c, 0xcb, 0xf2, 0x99, 0x53, 0xa2, 0x13, 0x68, 0x3c,
	0x8d, 0x8a, 0x14, 0xbb, 0xd0, 0x4c, 0xa6, 0x93, 0x44, 0x05, 0x5e, 0xcf, 0x8b, 0x19, 0x77, 0x01,
	0x22, 0x34, 0xe6, 0xa2, 0x48, 0x83, 0x5a, 0xcf, 0x8b, 0x5b, 0xdc, 0x7e, 0x47, 0x31, 0xb4, 0xaf,
	0x24, 0x25, 0x9a, 0x86, 0xb4, 0xe0, 0xf4, 0x5e, 0x90, 0xd2, 0xbf, 0x57, 0x47, 0x1c, 0x3a, 0x95,
	0x97, 0x4a, 0xe4, 0x33, 0x45, 0xb8, 0xbf, 0xb4, 0x34, 0x2f, 0xb7, 0x07, 0x7e, 0x5f, 0xa4, 0x7d,
	0x03, 0xe0, 0xcc, 0xf1, 0x10, 0x9a, 0x24, 0x65, 0x2e, 0x03, 0x66, 0xd3, 0xcc, 0xa4, 0x6f, 0x8c,
	0xc0, 0x9d, 0x1e, 0x5d, 0xc2, 0xce, 0xdd, 0x44, 0xe9, 0x21, 0x2d, 0xd4, 0x43, 0x41, 0x72, 0x81,
	0x01, 0x6c, 0xd9, 0x6e, 0x64, 0x9a, 0xd7, 0x63, 0xc6, 0x57, 0xa1, 0x85, 0x7a, 0xd5, 0x24, 0x2d,
	0xbd, 0x81, 0x32, 0x41, 0xf4, 0xe1, 0x41, 0x7b, 0xe5, 0x50, 0x42, 0x1d, 0x40, 0x73, 0xa2, 0x29,
	0x73, 0x16, 0x55, 0x2a, 0x27, 0xe3, 0x1e, 0xb0, 0x69, 0xa2, 0xf4, 0xb3, 0x48, 0xc6, 0x64, 0xed,
	0x7c, 0xee, 0x1b, 0x61, 0x94, 0x8c, 0x09, 0x8f, 0xa0, 0x31, 0xa3, 0xb9, 0x0e, 0xea, 0x16, 0xb9,
	0x63, 0x6a, 0xd7, 0x10, 0xb9, 0x4d, 0xff, 0x3d, 0xda, 0x31, 0xb4, 0xaf, 0x69, 0x4a, 0x6b, 0x8b,
	0xc5, 0xca, 0xb6, 0x96, 0x07, 0x18, 0x7c, 0x7a, 0x50, 0xbf, 0x7d, 0xbc, 0xc7, 0x0b, 0x60, 0xe5,
	0x7a, 0xb1, 0x6b, 0xec, 0x36, 0xef, 0x12, 0xee, 0x6e, 0xa8, 0x6e, 0xdc, 0xe8, 0x1f, 0x9e, 0x81,
	0xbf, 0x62, 0xc4, 0x9f, 0xc4, 0x61, 0xb7, 0x2a, 0x55, 0xca, 0xce, 0x81, 0x95, 0x88, 0xae, 0xe5,
	0x26, 0x71, 0xd8, 0xf9, 0x9e, 0xab, 0xac, 0x4b, 0xff, 0xdb, 0x9f, 0xed, 0xf4, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x89, 0x1c, 0x73, 0xef, 0x8b, 0x02, 0x00, 0x00,
}
